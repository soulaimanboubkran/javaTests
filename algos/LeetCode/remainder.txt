How the Solution Works
Let's work through the example: [1, 3, 2, 6, 1, 2] with k = 3

Start with an empty HashMap to track remainders: {}

The HashMap will store: {remainder → count}


Process each number in order:

Number: 1

Remainder when divided by 3: 1
Complement needed: (3-1) = 2
Have we seen any numbers with remainder 2? No, so 0 pairs.
Update HashMap: {1 → 1}


Number: 3

Remainder when divided by 3: 0
Complement needed: (3-0) = 0
Have we seen any numbers with remainder 0? No, so 0 pairs.
Update HashMap: {1 → 1, 0 → 1}


Number: 2

Remainder when divided by 3: 2
Complement needed: (3-2) = 1
Have we seen any numbers with remainder 1? Yes, 1 occurrence.
Add 1 to pair count, so pair count = 1
Update HashMap: {1 → 1, 0 → 1, 2 → 1}


Number: 6

Remainder when divided by 3: 0
Complement needed: (3-0) = 0
Have we seen any numbers with remainder 0? Yes, 1 occurrence.
Add 1 to pair count, so pair count = 2
Update HashMap: {1 → 1, 0 → 2, 2 → 1}


Number: 1

Remainder when divided by 3: 1
Complement needed: (3-1) = 2
Have we seen any numbers with remainder 2? Yes, 1 occurrence.
Add 1 to pair count, so pair count = 3
Update HashMap: {1 → 2, 0 → 2, 2 → 1}


Number: 2

Remainder when divided by 3: 2
Complement needed: (3-2) = 1
Have we seen any numbers with remainder 1? Yes, 2 occurrences.
Add 2 to pair count, so pair count = 5
Update HashMap: {1 → 2, 0 → 2, 2 → 2}




Final pair count: 5