These methods are formatting the `double` value `montant` (amount) according to different locales, specifically focusing on currency formatting. Here’s a breakdown of each method:

1. **`conversion_fr(double montant)`**:
   - **Purpose**: Formats a number as a decimal number using the French locale (i.e., it applies number formatting rules for France).
   - **Details**: Uses `DecimalFormat.getInstance(Locale.FRANCE)` to get the number formatting style for France. This affects how the number is displayed (e.g., grouping, decimal separator).
   - **Example Output**: If `montant = 1234.56`, it might output `1 234,56` (with a space as a thousands separator and a comma as the decimal separator).

2. **`conversion_us(double montant)`**:
   - **Purpose**: Formats a number as a decimal number using the U.S. locale (i.e., it applies number formatting rules for the United States).
   - **Details**: Uses `DecimalFormat.getInstance(Locale.US)` to get the number formatting style for the U.S.
   - **Example Output**: If `montant = 1234.56`, it might output `1,234.56` (with a comma as a thousands separator and a dot as the decimal separator).

3. **`argent_euro(double montant)`**:
   - **Purpose**: Formats a number as currency in euros, using the French locale.
   - **Details**: Uses `DecimalFormat.getCurrencyInstance(Locale.FRANCE)` to format the number as currency, applying the euro symbol (€) and using the French currency formatting.
   - **Example Output**: If `montant = 1234.56`, it might output `1 234,56 €` (with a space as a thousands separator and a euro symbol at the end).

4. **`argent_dollard_us(double montant)`**:
   - **Purpose**: Formats a number as U.S. dollars, using the U.S. locale.
   - **Details**: Uses `DecimalFormat.getCurrencyInstance(Locale.US)` to format the number as U.S. dollars, applying the dollar symbol ($) and using the U.S. currency formatting.
   - **Example Output**: If `montant = 1234.56`, it might output `$1,234.56` (with a comma as a thousands separator and a dollar symbol at the start).

5. **`argent_dollard_canada(double montant)`**:
   - **Purpose**: Formats a number as Canadian dollars, using the Canadian French locale.
   - **Details**: Uses `DecimalFormat.getCurrencyInstance(Locale.CANADA_FRENCH)` to format the number as Canadian dollars, applying the dollar symbol ($) and using the Canadian French currency formatting.
   - **Example Output**: If `montant = 1234.56`, it might output `1 234,56 $` (with a space as a thousands separator and a dollar symbol at the end).

6. **`argent_livre_sterlin(double montant)`**:
   - **Purpose**: Formats a number as British pounds, using the UK locale.
   - **Details**: Uses `DecimalFormat.getCurrencyInstance(Locale.UK)` to format the number as British pounds, applying the pound symbol (£) and using the UK currency formatting.
   - **Example Output**: If `montant = 1234.56`, it might output `£1,234.56` (with a comma as a thousands separator and a pound symbol at the start).

---

### Summary of Key Concepts:
- **`DecimalFormat.getInstance()`**: This method is used to format numbers according to a specific locale, influencing how numbers are displayed (such as decimal separators or grouping symbols).
- **`DecimalFormat.getCurrencyInstance()`**: This method is used to format numbers as currency values, applying the correct currency symbol and formatting for the specific locale.

These methods are useful for formatting monetary values correctly for different regions or countries, ensuring that the display of numbers is localized according to the cultural and financial norms of each location.